class Contact {
    constructor(firstName, lastName, address, city, state, zip, phoneNumber, email) {
        this.firstName = this.validateName(firstName, "First Name");
        this.lastName = this.validateName(lastName, "Last Name");
        this.address = this.validateAddress(address, "Address");
        this.city = this.validateAddress(city, "City");
        this.state = this.validateAddress(state, "State");
        this.zip = this.validateZip(zip);
        this.phoneNumber = this.validatePhone(phoneNumber);
        this.email = this.validateEmail(email);
    }

    validateName(name, fieldName) {
        const nameRegex = /^[A-Z][a-zA-Z]{2,}$/;
        if (!nameRegex.test(name)) {
            throw new Error(`${fieldName} must start with a capital letter and have at least 3 characters.`);
        }
        return name;
    }

    validateAddress(value, fieldName) {
        if (value.length < 4) {
            throw new Error(`${fieldName} must have at least 4 characters.`);
        }
        return value;
    }

    validateZip(zip) {
        const zipRegex = /^[0-9]{5,6}$/;
        if (!zipRegex.test(zip)) {
            throw new Error("Zip must be a valid 5 or 6-digit number.");
        }
        return zip;
    }

    validatePhone(phone) {
        const phoneRegex = /^[0-9]{10}$/;
        if (!phoneRegex.test(phone)) {
            throw new Error("Phone number must be a 10-digit number.");
        }
        return phone;
    }

    validateEmail(email) {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (!emailRegex.test(email)) {
            throw new Error("Invalid email format.");
        }
        return email;
    }

    updateContact(updatedDetails) {
        Object.assign(this, updatedDetails);
    }

    toString() {
        return `${this.firstName} ${this.lastName}, ${this.address}, ${this.city}, ${this.state} - ${this.zip}, Phone: ${this.phoneNumber}, Email: ${this.email}`;
    }
}

class AddressBook {
    constructor(name) {
        this.name = name;
        this.contacts = [];
    }

    addContact(contact) {
        let existingContacts = this.contacts.filter(
            (c) => c.firstName === contact.firstName && c.lastName === contact.lastName
        );

        if (existingContacts.length > 0) {
            console.log(` Duplicate Entry! Contact ${contact.firstName} ${contact.lastName} already exists.`);
            return;
        }

        this.contacts.push(contact);
        console.log(` Contact Added: ${contact.toString()}`);
    }

    findContact(firstName, lastName) {
        return this.contacts.find(contact => contact.firstName === firstName && contact.lastName === lastName);
    }

    editContact(firstName, lastName, updatedDetails) {
        const contact = this.findContact(firstName, lastName);
        if (contact) {
            contact.updateContact(updatedDetails);
            console.log(` Contact Updated: ${contact.toString()}`);
        } else {
            console.log(" Contact not found!");
        }
    }

    deleteContact(firstName, lastName) {
        const index = this.contacts.findIndex(contact => contact.firstName === firstName && contact.lastName === lastName);
        if (index !== -1) {
            this.contacts.splice(index, 1);
            console.log(` Contact Deleted: ${firstName} ${lastName}`);
        } else {
            console.log(" Contact not found!");
        }
    }

    getContactCount() {
        return this.contacts.length;
    }

    displayContacts() {
        console.log(`\n Address Book: ${this.name}`);
        if (this.contacts.length === 0) {
            console.log("No contacts available.");
        } else {
            this.contacts.forEach(contact => console.log(contact.toString()));
        }
        console.log(`\n🔢 Total Contacts: ${this.getContactCount()}`);
    }

    // 🔍 View Persons by City using filter and map
    viewPersonsByCity(city) {
        let contactsInCity = this.contacts.filter(contact => contact.city.toLowerCase() === city.toLowerCase());
        if (contactsInCity.length === 0) {
            console.log(` No contacts found in ${city}.`);
        } else {
            console.log(`\n Contacts in ${city}:`);
            contactsInCity.map(contact => console.log(contact.toString()));
        }
    }

    //  View Persons by State using filter and map
    viewPersonsByState(state) {
        let contactsInState = this.contacts.filter(contact => contact.state.toLowerCase() === state.toLowerCase());
        if (contactsInState.length === 0) {
            console.log(` No contacts found in ${state}.`);
        } else {
            console.log(`\n Contacts in ${state}:`);
            contactsInState.map(contact => console.log(contact.toString()));
        }
    }
}

class AddressBookManager {
    constructor() {
        this.addressBooks = [];
    }

    createAddressBook(name) {
        const newAddressBook = new AddressBook(name);
        this.addressBooks.push(newAddressBook);
        return newAddressBook;
    }

    displayAllAddressBooks() {
        this.addressBooks.forEach(book => book.displayContacts());
    }
}

// Example Usage
try {
    const manager = new AddressBookManager();

    // Creating Address Book
    const personalBook = manager.createAddressBook("Personal");

    // Adding Contacts
    personalBook.addContact(new Contact("John", "Doe", "123 Main St", "New York", "NY", "10001", "1234567890", "john@example.com"));
    personalBook.addContact(new Contact("Jane", "Smith", "456 Elm St", "Los Angeles", "CA", "90001", "9876543210", "jane@example.com"));
    personalBook.addContact(new Contact("Alice", "Brown", "789 Maple St", "New York", "NY", "10002", "4567891230", "alice@example.com"));

    // Viewing persons by City
    console.log("\n Viewing Persons in New York...");
    personalBook.viewPersonsByCity("New York");

    // Viewing persons by State
    console.log("\n Viewing Persons in California...");
    personalBook.viewPersonsByState("CA");

    // Display Contacts
    console.log("\n Current Contacts:");
    personalBook.displayContacts();
} catch (error) {
    console.error("Error:", error.message);
}
